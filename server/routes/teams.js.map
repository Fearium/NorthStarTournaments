{"version":3,"sources":["routes/teams.ts"],"names":[],"mappings":"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","file":"routes/teams.js","sourcesContent":["import express = require('express');\r\nimport passport = require('passport');\r\nvar router = express.Router();\r\n\r\n// db references\r\nimport mongoose = require('mongoose');\r\nimport teamModel = require('../models/team');\r\n\r\nimport Team = teamModel.Team;\r\n\r\n/* Utility Function to check if team is authenticated */\r\nfunction requireAuth(req:express.Request, res:express.Response, next: any) {\r\n    // check if the team is logged in\r\n    if (!req.isAuthenticated()) {\r\n        return res.redirect('/login');\r\n    }\r\n    next();\r\n}\r\n\r\n// GET - show main teams page - list all the teams\r\nrouter.get('/', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n   \r\n    // use the team model to query the teams collection\r\n    Team.find((error, teams) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            // no error, we found a list of teams\r\n            res.render('teams/index', {\r\n                title: 'Teams',\r\n                teams: teams,\r\n                userName: req.user ? req.user.username : ''\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n// GET add page - show the blank form\r\nrouter.get('/add', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n\r\n            res.render('teams/add', {\r\n                title: 'Add a Team',\r\n                userName: req.user ? req.user.username : ''\r\n            });\r\n});\r\n\r\n// POST add page - save the new team\r\nrouter.post('/add', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n    Team.create({\r\n        teamname: req.body.teamname,\r\n        player1: req.body.player1,\r\n        player2: req.body.player2,\r\n        player3: req.body.player3,\r\n        player4: req.body.player4,\r\n        player5: req.body.player5,\r\n        player6: req.body.player6,\r\n        createdby: req.user.username\r\n    }, (error, team) => {\r\n        // did we get back an error or valid teams object?\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            res.redirect('/teams');\r\n        }\r\n    })\r\n});\r\n\r\n// GET edit page - show the current team in the form\r\nrouter.get('/:id', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n\r\n    var id = req.params.id;\r\n\r\n    Team.findById(id, (error, Team) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            //show the edit view\r\n            res.render('team/edit', {\r\n                title: 'Team Details',\r\n                team: Team,\r\n                userName: req.user ? req.user.username : ''\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n// POST edit page - update the selected team\r\nrouter.post('/:id', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n\r\n    // grab the id from the url parameter\r\n    var id = req.params.id;\r\n\r\n    // create and populate a team object\r\n    var team = new Team({\r\n        _id: id,\r\n        teamname: req.body.teamname,\r\n        player1: req.body.player1,\r\n        player2: req.body.player2,\r\n        player3: req.body.player3,\r\n        player4: req.body.player4,\r\n        player5: req.body.player5,\r\n        player6: req.body.player6,\r\n        userName: req.body.userName\r\n    });\r\n    \r\n    \r\n\r\n    // run the update using mongoose and our model\r\n    Team.update({ _id: id }, team, (error) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            // if update is successful redirect to the teams page\r\n            res.redirect('/teams');\r\n        }\r\n    });\r\n});\r\n\r\n// GET delete team\r\nrouter.get('/delete/:id', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n\r\n    // get the id from the url\r\n    var id = req.params.id;\r\n\r\n    // use the model and delete this record\r\n    Team.remove({ _id: id }, (error) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            // if removal worked redirect to teams page\r\n            res.redirect('/teams');\r\n        }\r\n    });\r\n});\r\n\r\nmodule.exports = router;\r\n"],"sourceRoot":"/source/"}