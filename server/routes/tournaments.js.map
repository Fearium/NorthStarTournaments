{"version":3,"sources":["routes/tournaments.ts"],"names":[],"mappings":"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","file":"routes/tournaments.js","sourcesContent":["import express = require('express');\r\nimport passport = require('passport');\r\nvar router = express.Router();\r\n\r\n// db references\r\nimport mongoose = require('mongoose');\r\n\r\nimport tournamentModel = require('../models/tournaments');\r\nimport teamModel = require('../models/team');\r\n\r\nimport Tournament = tournamentModel.Tournament;\r\nimport Team = teamModel.Team;\r\n\r\n/* Utility Function to check if user is authenticated */\r\nfunction requireAuth(req:express.Request, res:express.Response, next: any) {\r\n    // check if the user is logged in\r\n    if (!req.isAuthenticated()) {\r\n        return res.redirect('/login');\r\n    }\r\n    next();\r\n}\r\n\r\n// GET - show main users page - list all the users\r\nrouter.get('/', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n   \r\n    // use the Users model to query the Users collection\r\n    Tournament.find((error, tournaments) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            // no error, we found a list of users\r\n            res.render('tournaments/index', {\r\n                title: 'Tournaments',\r\n                tournaments: tournaments,\r\n                userName: req.user ? req.user.username : ''\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n// GET add page - show the blank form\r\nrouter.get('/add', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n   Team.find((error, teams) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            // no error, we found a list of teams\r\n            res.render('tournaments/add', {\r\n                title: 'Add a New Tournament',\r\n                teams: teams,\r\n                userName: req.user ? req.user.userName : ''\r\n            });\r\n        }\r\n        });\r\n});\r\n\r\n// POST add page - save the new user\r\nrouter.post('/add', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n    Tournament.create({\r\n        name: req.body.name,\r\n        description: req.body.description,\r\n        size: req.body.size,\r\n        team1: req.body.team1,\r\n        team2: req.body.team2,\r\n        team3: req.body.team3,\r\n        team4: req.body.team4,\r\n        team5: req.body.team5,\r\n        team6: req.body.team6,\r\n        team7: req.body.team7,\r\n        team8: req.body.team8,\r\n        team9: req.body.team9,\r\n        team10: req.body.team10,\r\n        team11: req.body.team11,\r\n        team12: req.body.team12,\r\n        team13: req.body.team13,\r\n        team14: req.body.team14,\r\n        team15: req.body.team15,\r\n        team16: req.body.team16,\r\n        createdby: req.user.username\r\n    }, (error, tournament) => {\r\n        // did we get back an error or valid Users object?\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            res.redirect('/tournaments');\r\n        }\r\n    }) \r\n});\r\n\r\n// GET edit page - show the current user in the form\r\nrouter.get('/:id', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n\r\n    var id = req.params.id;\r\n\r\n    Tournament.findById(id, (error, Tournament) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            //show the edit view\r\n            res.render('tournaments/edit', {\r\n                title: 'Tournament Details',\r\n                tournament: Tournament,\r\n                userName: req.user ? req.user.userName : ''\r\n            });\r\n        }\r\n    });\r\n});\r\n\r\n// POST edit page - update the selected user\r\nrouter.post('/:id', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n\r\n    // grab the id from the url parameter\r\n    var id = req.params.id;\r\n\r\n    // create and populate a tournament object\r\n    var tournament = new Tournament({\r\n        _id: id,\r\n        name: req.body.name,\r\n        description: req.body.description,\r\n        size: req.body.size,\r\n        team1: req.body.team1,\r\n        team2: req.body.team2,\r\n        team3: req.body.team3,\r\n        team4: req.body.team4,\r\n        team5: req.body.team5,\r\n        team6: req.body.team6,\r\n        team7: req.body.team7,\r\n        team8: req.body.team8,\r\n        team9: req.body.team9,\r\n        team10: req.body.team10,\r\n        team11: req.body.team11,\r\n        team12: req.body.team12,\r\n        team13: req.body.team13,\r\n        team14: req.body.team14,\r\n        team15: req.body.team15,\r\n        team16: req.body.team16\r\n    });\r\n    \r\n    \r\n\r\n    // run the update using mongoose and our model\r\n    Tournament.update({ _id: id }, tournament, (error) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            // if update is successful redirect to the users page\r\n            res.redirect('/tournaments');\r\n        }\r\n    });\r\n});\r\n\r\n// GET delete user\r\nrouter.get('/delete/:id', requireAuth, (req: express.Request, res: express.Response, next: any) => {\r\n\r\n    // get the id from the url\r\n    var id = req.params.id;\r\n\r\n    // use the model and delete this record\r\n    Tournament.remove({ _id: id }, (error) => {\r\n        if (error) {\r\n            console.log(error);\r\n            res.end(error);\r\n        }\r\n        else {\r\n            // if removal worked redirect to users page\r\n            res.redirect('/tournaments');\r\n        }\r\n    });\r\n});\r\n\r\n\r\n// make this public\r\nmodule.exports = router;"],"sourceRoot":"/source/"}